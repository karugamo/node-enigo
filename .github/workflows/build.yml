name: Build and Release Binaries

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: node-enigo-linux-x64.node
            asset_name: node-enigo-linux-x64.node
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: node-enigo-linux-arm64.node
            asset_name: node-enigo-linux-arm64.node
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: node-enigo-macos-arm64.node
            asset_name: node-enigo-macos-arm64.node

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxtst-dev libxdo-dev

      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ] && [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            # Cross-compile for arm64 on macOS
            rustup target add aarch64-apple-darwin
            cargo build --release --target aarch64-apple-darwin
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # Cross-compile for arm64 on Linux
            rustup target add aarch64-unknown-linux-gnu
            cargo build --release --target aarch64-unknown-linux-gnu
          else
            cargo build --release
          fi

      - name: Copy binary
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ] && [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            # For macOS arm64
            cp target/aarch64-apple-darwin/release/libenigo_example.dylib ${{ matrix.artifact_name }}
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            # For Linux arm64
            cp target/aarch64-unknown-linux-gnu/release/libenigo_example.so ${{ matrix.artifact_name }}
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # For Linux x64
            cp target/release/libenigo_example.so ${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List all files
        run: ls -la

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            node-enigo-linux-x64.node/node-enigo-linux-x64.node
            node-enigo-linux-arm64.node/node-enigo-linux-arm64.node
            node-enigo-macos-arm64.node/node-enigo-macos-arm64.node
          draft: false
          prerelease: false
          generate_release_notes: true
